#!/usr/bin/env bash

function is-executable() {
    command -v "$1" >/dev/null 2>&1
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_" || exit 1
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null >/dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$*" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* ./*
    fi
}

# Create a data URL from a file
function dataurl() {
    local mimeType
    mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        open .
    else
        open "$@"
    fi
}

# `t` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function t() {
    tree -aC -I '.git|node_modules' --dirsfirst "$@" | less -FRNX
}

# File management
if is-executable nautilus; then
    function files() {
        (nautilus -w "$1" </dev/null &>/dev/null &)
    }
fi

# VSCode
if is-executable code; then
    function code() {
        # In case the Wayland version segfaults, use X11 backend.
        (/usr/bin/code "$CODE_USER_FLAGS" "$@" </dev/null &>/dev/null &) || (/usr/bin/code "$@" </dev/null &>/dev/null &)
    }
fi
